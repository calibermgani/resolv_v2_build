{"version":3,"file":"common.871764ba6d9a6134.js","mappings":";;;;;;;;;;;;;;;;AAAoD;AACb;AACyB;AACzD,SAASG,YAAY,CAACC,OAAO,EAAEC,SAAS,GAAGL,4DAAc,EAAE;EAC9D,OAAOC,mDAAO,CAAC,CAACK,MAAM,EAAEC,UAAU,KAAK;IACnC,IAAIC,UAAU,GAAG,IAAI;IACrB,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIC,QAAQ,GAAG,IAAI;IACnB,MAAMC,IAAI,GAAG,MAAM;MACf,IAAIH,UAAU,EAAE;QACZA,UAAU,CAACI,WAAW,EAAE;QACxBJ,UAAU,GAAG,IAAI;QACjB,MAAMK,KAAK,GAAGJ,SAAS;QACvBA,SAAS,GAAG,IAAI;QAChBF,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC;MAC1B;IACJ,CAAC;IACD,SAASE,YAAY,GAAG;MACpB,MAAMC,UAAU,GAAGN,QAAQ,GAAGN,OAAO;MACrC,MAAMa,GAAG,GAAGZ,SAAS,CAACY,GAAG,EAAE;MAC3B,IAAIA,GAAG,GAAGD,UAAU,EAAE;QAClBR,UAAU,GAAG,IAAI,CAACU,QAAQ,CAACC,SAAS,EAAEH,UAAU,GAAGC,GAAG,CAAC;QACvDV,UAAU,CAACa,GAAG,CAACZ,UAAU,CAAC;QAC1B;MACJ;MACAG,IAAI,EAAE;IACV;IACAL,MAAM,CAACe,SAAS,CAACnB,6EAAwB,CAACK,UAAU,EAAGM,KAAK,IAAK;MAC7DJ,SAAS,GAAGI,KAAK;MACjBH,QAAQ,GAAGL,SAAS,CAACY,GAAG,EAAE;MAC1B,IAAI,CAACT,UAAU,EAAE;QACbA,UAAU,GAAGH,SAAS,CAACa,QAAQ,CAACH,YAAY,EAAEX,OAAO,CAAC;QACtDG,UAAU,CAACa,GAAG,CAACZ,UAAU,CAAC;MAC9B;IACJ,CAAC,EAAE,MAAM;MACLG,IAAI,EAAE;MACNJ,UAAU,CAACe,QAAQ,EAAE;IACzB,CAAC,EAAEH,SAAS,EAAE,MAAM;MAChBV,SAAS,GAAGD,UAAU,GAAG,IAAI;IACjC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC;AACN","sources":["./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n"],"names":["asyncScheduler","operate","createOperatorSubscriber","debounceTime","dueTime","scheduler","source","subscriber","activeTask","lastValue","lastTime","emit","unsubscribe","value","next","emitWhenIdle","targetTime","now","schedule","undefined","add","subscribe","complete"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}